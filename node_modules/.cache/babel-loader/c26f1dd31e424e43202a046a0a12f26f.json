{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programacion WEB\\\\Proyecto_Final\\\\ProyectoFinal\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './components/Login/Login';\nimport SignUp from './components/SignUp/SignUp';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst routing = /*#__PURE__*/_jsxDEV(Router, {\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      component: App\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"firebase.auth().signInWithRedirect(provider);\",\n      component: Login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/signup\",\n      component: SignUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 1\n}, this);\n\nvar provider = new firebase.auth.GoogleAuthProvider();\nfirebase.auth().signInWithPopup(provider).then(result => {\n  /** @type {firebase.auth.OAuthCredential} */\n  var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n  var token = credential.accessToken; // The signed-in user info.\n\n  var user = result.user; // ...\n}).catch(error => {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message; // The email of the user's account used.\n\n  var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n  var credential = error.credential; // ...\n});\nReactDOM.render(routing, document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["D:/Programacion WEB/Proyecto_Final/ProyectoFinal/src/index.js"],"names":["React","ReactDOM","App","Login","SignUp","serviceWorker","BrowserRouter","Router","Route","routing","provider","firebase","auth","GoogleAuthProvider","signInWithPopup","then","result","credential","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AAEA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AAEA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,KAFJ,QAGO,kBAHP;;;AAKA,MAAMC,OAAO,gBACb,QAAC,MAAD;AAAA,yBACI;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,SAAS,EAAEP;AAA3B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,+CAAZ;AAA4D,MAAA,SAAS,EAAEC;AAAvE;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,SAAZ;AAAsB,MAAA,SAAS,EAAEC;AAAjC;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADA;;AAQA,IAAIM,QAAQ,GAAG,IAAIC,QAAQ,CAACC,IAAT,CAAcC,kBAAlB,EAAf;AACAF,QAAQ,CAACC,IAAT,GACGE,eADH,CACmBJ,QADnB,EAEGK,IAFH,CAESC,MAAD,IAAY;AAChB;AACA,MAAIC,UAAU,GAAGD,MAAM,CAACC,UAAxB,CAFgB,CAIhB;;AACA,MAAIC,KAAK,GAAGD,UAAU,CAACE,WAAvB,CALgB,CAMhB;;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB,CAPgB,CAQhB;AACD,CAXH,EAWKC,KAXL,CAWYC,KAAD,IAAW;AAClB;AACA,MAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,MAAIC,YAAY,GAAGH,KAAK,CAACI,OAAzB,CAHkB,CAIlB;;AACA,MAAIC,KAAK,GAAGL,KAAK,CAACK,KAAlB,CALkB,CAMlB;;AACA,MAAIV,UAAU,GAAGK,KAAK,CAACL,UAAvB,CAPkB,CAQlB;AACD,CApBH;AAqBAhB,QAAQ,CAAC2B,MAAT,CAAgBnB,OAAhB,EAAyBoB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAzB,aAAa,CAAC0B,UAAd","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport Login from './components/Login/Login'\r\nimport SignUp from './components/SignUp/SignUp'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n} from \"react-router-dom\";\r\n\r\nconst routing = (\r\n<Router>\r\n    <div>\r\n        <Route path=\"/\" component={App} />\r\n        <Route path=\"firebase.auth().signInWithRedirect(provider);\" component={Login} />\r\n        <Route path=\"/signup\" component={SignUp} />\r\n    </div>\r\n</Router>);\r\nvar provider = new firebase.auth.GoogleAuthProvider();\r\nfirebase.auth()\r\n  .signInWithPopup(provider)\r\n  .then((result) => {\r\n    /** @type {firebase.auth.OAuthCredential} */\r\n    var credential = result.credential;\r\n\r\n    // This gives you a Google Access Token. You can use it to access the Google API.\r\n    var token = credential.accessToken;\r\n    // The signed-in user info.\r\n    var user = result.user;\r\n    // ...\r\n  }).catch((error) => {\r\n    // Handle Errors here.\r\n    var errorCode = error.code;\r\n    var errorMessage = error.message;\r\n    // The email of the user's account used.\r\n    var email = error.email;\r\n    // The firebase.auth.AuthCredential type that was used.\r\n    var credential = error.credential;\r\n    // ...\r\n  });\r\nReactDOM.render(routing, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"]},"metadata":{},"sourceType":"module"}