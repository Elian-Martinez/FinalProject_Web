[{"D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\index.js":"1","D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\App.js":"2","D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\serviceWorker.js":"3","D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\components\\SignUp\\SignUp.js":"4","D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\components\\Login\\Login.js":"5","D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\components\\posts\\Posts.js":"6"},{"size":713,"mtime":1629250815990,"results":"7","hashOfConfig":"8"},{"size":915,"mtime":1629249597148,"results":"9","hashOfConfig":"8"},{"size":5328,"mtime":1628747004438,"results":"10","hashOfConfig":"8"},{"size":98,"mtime":1628747568239,"results":"11","hashOfConfig":"8"},{"size":1054,"mtime":1629251458374,"results":"12","hashOfConfig":"8"},{"size":5758,"mtime":1629179074275,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"sd8q4i",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},"D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\index.js",["28"],"D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\App.js",["29"],"D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\serviceWorker.js",[],["30","31"],"D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\components\\SignUp\\SignUp.js",[],"D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\components\\Login\\Login.js",["32","33"],"D:\\Programacion WEB\\Proyecto_Final\\ProyectoFinal\\src\\components\\posts\\Posts.js",["34","35"],"import React, { Component, Fragment } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport request from \"superagent\";\r\nimport debounce from \"debounce\";\r\nimport \"./Posts.scss\";\r\n\r\nclass Posts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Sets up our initial state\r\n    this.state = {\r\n      error: false,\r\n      hasMore: true,\r\n      isLoading: false,\r\n      posts: [],\r\n    };\r\n\r\n    // Binds our scroll event handler\r\n    window.onscroll = debounce(() => {\r\n      const {\r\n        loadposts,\r\n        state: {\r\n          error,\r\n          isLoading,\r\n          hasMore,\r\n        },\r\n      } = this;\r\n\r\n      // Bails early if:\r\n      // * there's an error\r\n      // * it's already loading\r\n      // * there's nothing left to load\r\n      if (error || isLoading || !hasMore) return;\r\n\r\n      // Checks that the page has scrolled to the bottom\r\n      if (\r\n        window.innerHeight + document.documentElement.scrollTop\r\n        === document.documentElement.offsetHeight\r\n      ) {\r\n        loadposts();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  componentWillMount() {\r\n    // Loads some posts on initial load\r\n    this.loadposts();\r\n  }\r\n\r\n  loadposts = () => {\r\n    this.setState({ isLoading: true }, () => {\r\n      request\r\n        .get('https://randomuser.me/api/?results=10')\r\n        .then((results) => {\r\n          // Creates a massaged array of post data\r\n          const nextPosts = results.body.results.map(post => ({\r\n            email: post.email,\r\n            name: Object.values(post.name).join(' '),\r\n            photo: post.picture.medium,\r\n            username: post.login.username,\r\n            uuid: post.login.uuid,\r\n          }));\r\n\r\n          // Merges the next posts into our existing posts\r\n          this.setState({\r\n            // Note: Depending on the API you're using, this value may\r\n            // be returned as part of the payload to indicate that there\r\n            // is no additional data to be loaded\r\n            hasMore: (this.state.posts.length < 100),\r\n            isLoading: false,\r\n            posts: [\r\n              ...this.state.posts,\r\n              ...nextPosts,\r\n            ],\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            error: err.message,\r\n            isLoading: false,\r\n           });\r\n        })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      error,\r\n      hasMore,\r\n      isLoading,\r\n      posts,\r\n    } = this.state;\r\n\r\n    const cantLikes = 12;\r\n\r\n    return (\r\n      <div className=\"PostContainer\">\r\n\r\n        {posts.map(post => (\r\n          <Fragment key={post.username}>\r\n            <hr/>\r\n            <div className=\"Post\">\r\n              <div className=\"pHeader\">\r\n                <img className=\"iUser\"\r\n                  alt={post.username}\r\n                  src={post.photo} />\r\n                <h2 className=\"User\">@{post.name}</h2>  \r\n                <h2 className=\"User\">@{post.username}</h2>                \r\n              </div>\r\n              <div className=\"postBody\">\r\n                <p>Lorem Ipsum es simplemente el texto de \r\n                  relleno de las imprentas y archivos de texto. \r\n                  Lorem Ipsum ha sido el texto de relleno \r\n                  estándar de las industrias desde el año 1500, \r\n                  cuando un impresor (N. del T. persona que se \r\n                  dedica a la imprenta) desconocido usó una \r\n                  galería de textos y los mezcló de tal manera \r\n                  que logró hacer un libro de textos especimen. \r\n                  No sólo sobrevivió 500 años, sino que tambien \r\n                  ingresó como texto de relleno en documentos \r\n                  electrónicos, quedando esencialmente igual al \r\n                  original. Fue popularizado en los 60s con la \r\n                  creación de las hojas \"Letraset\", las cuales \r\n                  contenian pasajes de Lorem Ipsum, y más \r\n                  recientemente con software de autoedición, \r\n                  como por ejemplo Aldus PageMaker, el cual \r\n                  incluye versiones de Lorem Ipsum.</p>\r\n              </div>\r\n              <div className=\"footerPost\">\r\n                <div className=\"likes\">\r\n                  <input type=\"text\" className=\"inputComment\" placeholder=\"Escribe un comentario...\" ></input>\r\n                  <a class=\"btn btn-primary\"><span class=\"material-icons\">\r\n                  forum\r\n                  </span></a>\r\n                </div>\r\n                <div className=\"comments\">\r\n                  {posts.map(post => (\r\n                    <Fragment key={post.username}>\r\n                      <div className=\"comment\">\r\n                        <span className=\"postNameComment\">\r\n                          @{post.username}\r\n                        </span>\r\n                        <p>For a complete list of ALL icons (font awesome, bootstrap and google), visit the Icon Reference.</p>\r\n                      </div>\r\n                    </Fragment>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Fragment>\r\n        ))}\r\n        <hr />\r\n        {error &&\r\n          <div style={{ \r\n            color: '#FFFFFF',\r\n            background: '#E80D0C'\r\n           }}>\r\n            {error}\r\n          </div>\r\n        }\r\n        {isLoading &&\r\n          <div>Loading...</div>\r\n        }\r\n        {!hasMore &&\r\n          <div style={{ \r\n            color: '#FFFFFF',\r\n            background: '#2CFF00'\r\n            }}>\r\n            The END! No more posts!\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst container = document.createElement(\"div\");\r\ndocument.body.appendChild(container);\r\nrender(<Posts />, container);\r\n\r\nexport default Posts;",{"ruleId":"36","severity":1,"message":"37","line":8,"column":8,"nodeType":"38","messageId":"39","endLine":8,"endColumn":16},{"ruleId":"36","severity":1,"message":"40","line":8,"column":12,"nodeType":"38","messageId":"39","endLine":8,"endColumn":17},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":7,"column":5,"nodeType":"47","messageId":"48","endLine":29,"endColumn":7},{"ruleId":"45","severity":1,"message":"46","line":30,"column":5,"nodeType":"49","messageId":"48","endLine":30,"endColumn":44},{"ruleId":"36","severity":1,"message":"50","line":95,"column":11,"nodeType":"38","messageId":"39","endLine":95,"endColumn":20},{"ruleId":"51","severity":1,"message":"52","line":133,"column":19,"nodeType":"53","endLine":133,"endColumn":46},"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","'async' is defined but never used.","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","ExpressionStatement","'cantLikes' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]